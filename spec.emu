<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Promise.prototype.finally
stage: 2
contributors: Jordan Harband
</pre>

<emu-clause id="sec-promise.prototype.finally">
	<h1>Promise.prototype.finally ( _onFinally_ )</h1>
	<p>When the `finally` method is called with argument _onFinally_, the following steps are taken:</p>
	<emu-alg>
		1. Let _promise_ be the *this* value.
		1. If IsPromise(_promise_) is *false*, throw a *TypeError* exception.
		1. Let _thenFinally_ be ! CreateThenFinally(_onFinally_).
		1. Let _catchFinally_ be ! CreateCatchFinally(_onFinally_).
		1. Return ? Invoke(_promise_, *"then"*, &laquo; _thenFinally_, _catchFinally_ &raquo;).
	</emu-alg>
</emu-clause>

<emu-clause id="sec-createthenfinally" aoid="CreateThenFinally">
	<h1>CreateThenFinally ( _onFinally_ )</h1>
	<p>The abstract operation CreateThenFinally takes an _onFinally_ function, and returns a callback function for use in Promise.prototype.finally.</p>
	<emu-alg>
		1. If IsCallable(_onFinally_) is not *true*, return _onFinally_.
		1. Return a function that takes one argument, _value_, and when invoked, performs the following steps:
			1. Let _result_ be ? Call(_onFinally_, *undefined*).
			1. Let _promise_ be ! PromiseResolve(%Promise%, _result_).
			1. Let _valueThunk_ be equivalent to a function that returns _value_.
			1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).
			1. Return PerformPromiseThen(_promise_, _valueThunk_, *undefined*, _promiseCapability_).
	</emu-alg>
</emu-clause>

<emu-clause id="sec-createcatchfinally" aoid="CreateCatchFinally">
	<h1>CreateCatchFinally ( _onFinally_ )</h1>
	<p>The abstract operation CreateThenFinally takes an _onFinally_ function, and returns a callback function for use in Promise.prototype.finally.</p>
	<emu-alg>
		1. If IsCallable(_onFinally_) is not *true*, return _onFinally_.
		1. Return a function that takes one argument, _reason_, and when invoked, performs the following steps:
			1. Let _result_ be ? Call(_onFinally_, *undefined*).
			1. Let _promise_ be ! PromiseResolve(%Promise%, _result_).
			1. Let _thrower_ be equivalent to a function that throws _reason_.
			1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).
			1. Return PerformPromiseThen(_promise_, _thrower_, *undefined*, _promiseCapability_).
	</emu-alg>
</emu-clause>

<!-- es6num="25.4.4.5" -->
<emu-clause id="sec-promise.resolve">
	<h1>Promise.resolve ( _x_ )</h1>
	<p>The `resolve` function returns either a new promise resolved with the passed argument, or the argument itself if the argument is a promise produced by this constructor.</p>
	<emu-alg>
		1. Let _C_ be the *this* value.
		1. If Type(_C_) is not Object, throw a *TypeError* exception.
		1. If IsPromise(_x_) is *true*, then
			1. Let _xConstructor_ be ? Get(_x_, `"constructor"`).
			1. If SameValue(_xConstructor_, _C_) is *true*, return _x_.
		1. Return ? PromiseResolve(_C_, _x_).
	</emu-alg>
	<emu-note>
		<p>The `resolve` function expects its *this* value to be a constructor function that supports the parameter conventions of the `Promise` constructor.</p>
	</emu-note>
</emu-clause>

<emu-clause id="sec-promise-resolve" aoid="PromiseResolve">
	<h1>PromiseResolve ( _C_, _x_ )</h1>
	<p>The abstract operation PromiseResolve, given a constructor and a value, returns either a new promise resolved with the passed argument, or the argument itself if the argument is a promise produced by this constructor.</p>
	<emu-alg>
		1. Assert: Type(_C_) is Object.
		1. Let _promiseCapability_ be ? NewPromiseCapability(_C_).
		1. Perform ? Call(_promiseCapability_.[[Resolve]], *undefined*, &laquo; _x_ &raquo;).
		1. Return _promiseCapability_.[[Promise]].
	</emu-alg>
</emu-clause>
